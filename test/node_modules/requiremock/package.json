{
  "author": {
    "name": "Allan Ebdrup"
  },
  "name": "requiremock",
  "version": "1.3.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/Muscula/requiremock"
  },
  "private": false,
  "main": "./lib/requiremock.js",
  "engines": {
    "node": ">=0.6.20",
    "npm": ">=1.1.9"
  },
  "dependencies": {},
  "scripts": {
    "test": "node ./bin/runTests.js",
    "cov": "node ./bin/runCoverage.js"
  },
  "devDependencies": {
    "coffee-script": "",
    "mocha": "",
    "chai": "",
    "sinon": "",
    "sinon-chai": "",
    "jshint": "",
    "nodecoverage": "0.2.2"
  },
  "readme": "requiremock\r\n-----------\r\nWith this you can mock out ```require``` statements. It's good for testing, or intercepting requires.\r\n\r\nI'm using it in [nodecoverage](https://github.com/Muscula/nodecoverage) to inject instrumented versions of code,\r\nfor code coverage reports.\r\n\r\nInstallation\r\n------------\r\n```npm install requiremock```\r\n\r\n\r\nFeatures\r\n--------\r\nThere are different ways you can use ```requiremock```, you can.\r\n- mock modules that match the exact string passed to ```require```\r\n- mock modules that match the string passed to ```require``` with wildcard ```*```\r\n- mock modules that match the string passed to require with a ```RegExp```\r\n- The mock you pass can be supplied by a function\r\n- You can specify what __filename and __dirname should be when you require with ```requiremock```\r\n- Instead of passing a mock module, you can pass a path to a module to be used as a mock\r\n\r\nMatch the exact string passed to require\r\n----------------------------------------\r\nYou can mock out the result of ```require(\"fs\")``` in the file ```test.js``` like this\r\n```js\r\nvar fsMock = {\r\n\treadFileSync: function(){\r\n\t\treturn \"my test file contents\";\r\n\t}\r\n}\r\n\r\nvar requireMock = require(\"requiremock\")(__filename);\r\nrequireMock.mock(\"fs\", fsMock);\r\nrequireMock(\"./myModule.js\");\r\n```\r\nThis will mean that the following code in ```myModule.js``` will output ```my test file contents```\r\n```js\r\nvar fs = require(\"fs\");\r\nconsole.log(fs.readFileSync(\"config.txt\", \"utf-8));\r\n```\r\n\r\nNOTE: When matching, matching is done both on the string passed to ```require``` and the complete\r\npath to the file that is required.\r\n\r\nNOTE: When a mock has been served once, that mock will be removed from the list of mocks. If you want to mock\r\nevery single ```require``` made for you mock, you should use ```globalMock``` described below.\r\n\r\nMatch the string passed to require with wildcard ```*```\r\n--------------------------------------------------------\r\nYou can use wildcards when mocking out ```require(\"../../util/logger.js\")``` with the wildcard ```*```\r\nso your mock does not break if someone decides to move the logger.js file.\r\n```\r\n var loggerMock = {\r\n \tlog: function(text){\r\n \t\treturn console.log(\"logging: \" + text);\r\n \t}\r\n }\r\n\r\n var requireMock = require(\"requiremock\")(__filename);\r\n requireMock.mock(\"*logger.js\", fsMock);\r\n requireMock(\"./myModule.js\");\r\n ```\r\n\r\nThis will mean that the following code in ```myModule.js``` will output ```logging: test```\r\n```\r\nvar logger = require(\"../../util/logger.js\");\r\nlogger.log(\"test\");\r\n```\r\n\r\n\r\nMatch the string passed to require with a ```RegExp```\r\n------------------------------------------------------\r\nYou can also use a ```RegExp``` when mocking out. This is the equivalent of the wildcard example above,\r\nonly using a ```RegExp```.\r\n ```\r\n  var loggerMock = {\r\n  \tlog: function(text){\r\n  \t\treturn console.log(\"logging: \" + text);\r\n  \t}\r\n  }\r\n\r\n  var requireMock = require(\"requiremock\")(__filename);\r\n  requireMock.mock(/.*logger\\.js.*/g, fsMock);\r\n  requireMock(\"./myModule.js\");\r\n  ```\r\n\r\n This will mean that the following code in ```myModule.js``` will output ```logging: test```\r\n ```\r\n var logger = require(\"../../util/logger.js\");\r\n logger.log(\"test\");\r\n ```\r\n\r\n\r\nHave the mock you pass be supplied by a function\r\n------------------------------------------------\r\n You can mock out the result of ```require(\"fs\")``` in the file ```test.js``` like this\r\n ```\r\n var fsMock = {\r\n \treadFileSync: function(){\r\n \t\treturn \"my test file contents\";\r\n \t}\r\n }\r\n\r\n var requireMock = require(\"requiremock\")(__filename);\r\n requireMock.mock(\"fs\", function(stringPassedToRequire, filePathRequired, fileDoingRequire){\r\n \treturn fsMock;\r\n });\r\n requireMock(\"./myModule.js\");\r\n ```\r\n\r\n This will mean that the following code in ```myModule.js``` will output ```my test file contents```\r\n ```\r\n var fs = require(\"fs\");\r\n console.log(fs.readFileSync(\"config.txt\", \"utf-8));\r\n ```\r\nIn this example we are not really using the function for anything, but you can see the parameters passed\r\nin the parameter names above.\r\n\r\nMock all requires for a module, including all nested requires\r\n-------------------------------------------------------------\r\n```js\r\nvar fsMock = {\r\n\treadFileSync: function(){\r\n\t\treturn \"my test file contents\";\r\n\t}\r\n}\r\n\r\nvar requireMock = require(\"requiremock\")(__filename);\r\nrequireMock.globalMock(\"fs\", fsMock);\r\nrequireMock(\"./A.js\");\r\n```\r\n\r\nNOTE: Nested ```require``` statements are also mocked, so if you globalMock ```fs``` and use ```requiremock``` on  a file\r\n```A``` that requires a file ```B``` that requires a file ```C``` and the file ```C``` has the statement\r\n```require(\"fs\")``` that require is mocked. Also if ```A``` or ```B``` has the statement ```require(\"fs\")```, those are\r\nalso mocked.\r\n\r\n\r\nSpecify what __filename and __dirname should be\r\n-----------------------------------------------\r\nYou specify what __filename and __dirname should be like this:\r\n```\r\nvar requireMock = require(\"requiremock\")(__filename);\r\nrequireMock(\"./myModule.js\", \"myFileName, \"myDirName\");\r\n```\r\n\r\nThis will mean that the following code in ```myModule.js``` will output ```myFileName myDirName```\r\n```\r\nconsole.log(__filename, __dirname);\r\n```\r\n\r\nNOTE: This can be combined with mocking.\r\n\r\n\r\nInstead of passing a mock object, you can pass a path to a module to be used as a mock\r\n--------------------------------------------------------------------------------------\r\n```\r\nvar requireMock = require(\"requiremock\")(__filename);\r\nrequireMock.mockFilePath(\"./logger.js\", path.resolve(\"test/mocks/loggerMock.js));\r\nrequireMock(\"./myModule.js\");\r\n```\r\n\r\nThis will mean that the following code in ```myModule.js``` will have the logger mocked\r\n```\r\nvar logger = require(\"./logger.js\"); //this returns the mock object in test/mocks/loggerMock.js\r\nlogger.log(\"test\");\r\n```\r\n\r\nThe difference between doing the above and:\r\n```\r\nrequireMock.mockFilePath(\"./logger.js\", require(\"../mocks/loggerMock.js));\r\n```\r\nis that when using ```mockFilePath``` any mocks defined are also applied to ```path.resolve(\"test/mocks/loggerMock.js)```\r\nYou may not need that very often, but I needed it, so I made it.\r\n\r\nNOTE: ```mockFilePath``` can also take a function that returns a string.\r\n\r\n",
  "_id": "requiremock@1.3.3",
  "description": "requiremock\r -----------\r With this you can mock out ```require``` statements. It's good for testing, or intercepting requires.",
  "_from": "requiremock"
}
